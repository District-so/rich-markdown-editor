webpackHotUpdate("main",{

/***/ "./src/components/SelectionToolbar.tsx":
/*!*********************************************!*\
  !*** ./src/components/SelectionToolbar.tsx ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst assert_1 = __importDefault(__webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\"));\nconst React = __importStar(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nconst react_portal_1 = __webpack_require__(/*! react-portal */ \"./node_modules/react-portal/lib/index.js\");\nconst tableCol_1 = __importDefault(__webpack_require__(/*! ../menus/tableCol */ \"./src/menus/tableCol.tsx\"));\nconst tableRow_1 = __importDefault(__webpack_require__(/*! ../menus/tableRow */ \"./src/menus/tableRow.tsx\"));\nconst table_1 = __importDefault(__webpack_require__(/*! ../menus/table */ \"./src/menus/table.tsx\"));\nconst formatting_1 = __importDefault(__webpack_require__(/*! ../menus/formatting */ \"./src/menus/formatting.ts\"));\nconst FloatingToolbar_1 = __importDefault(__webpack_require__(/*! ./FloatingToolbar */ \"./src/components/FloatingToolbar.tsx\"));\nconst LinkEditor_1 = __importDefault(__webpack_require__(/*! ./LinkEditor */ \"./src/components/LinkEditor.tsx\"));\nconst Menu_1 = __importDefault(__webpack_require__(/*! ./Menu */ \"./src/components/Menu.tsx\"));\nconst isMarkActive_1 = __importDefault(__webpack_require__(/*! ../queries/isMarkActive */ \"./src/queries/isMarkActive.ts\"));\nconst getMarkRange_1 = __importDefault(__webpack_require__(/*! ../queries/getMarkRange */ \"./src/queries/getMarkRange.ts\"));\nconst getNodeRange_1 = __importDefault(__webpack_require__(/*! ../queries/getNodeRange */ \"./src/queries/getNodeRange.ts\"));\nconst isNodeActive_1 = __importDefault(__webpack_require__(/*! ../queries/isNodeActive */ \"./src/queries/isNodeActive.ts\"));\nconst getColumnIndex_1 = __importDefault(__webpack_require__(/*! ../queries/getColumnIndex */ \"./src/queries/getColumnIndex.ts\"));\nconst getRowIndex_1 = __importDefault(__webpack_require__(/*! ../queries/getRowIndex */ \"./src/queries/getRowIndex.ts\"));\nconst createAndInsertLink_1 = __importDefault(__webpack_require__(/*! ../commands/createAndInsertLink */ \"./src/commands/createAndInsertLink.ts\"));\nconst prosemirror_utils_1 = __webpack_require__(/*! prosemirror-utils */ \"./node_modules/prosemirror-utils/dist/index.js\");\nfunction isActive(props) {\n    const { view } = props;\n    const { selection } = view.state;\n    const image_node = prosemirror_utils_1.findSelectedNodeOfType(view.state.schema.nodes.image)(selection);\n    return selection && !selection.empty && !image_node;\n}\nclass SelectionToolbar extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleOnCreateLink = async (title) => {\n            const { dictionary, onCreateLink, view, onShowToast } = this.props;\n            if (!onCreateLink) {\n                return;\n            }\n            const { dispatch, state } = view;\n            const { from, to } = state.selection;\n            assert_1.default(from !== to);\n            const href = `creating#${title}â€¦`;\n            const is_button = isNodeActive_1.default(state.schema.nodes.button)(state);\n            if (is_button) {\n                const range = getNodeRange_1.default(state.schema.nodes.button)(state);\n                if (!range)\n                    return false;\n                dispatch(view.state.tr\n                    .setBlockType(from, from + title.length, state.schema.nodes.button, { href, title, style: range.node.attrs.style }));\n            }\n            else {\n                const markType = state.schema.marks.link;\n                dispatch(state.tr\n                    .removeMark(from, to, markType)\n                    .addMark(from, to, markType.create({ href })));\n            }\n            createAndInsertLink_1.default(view, title, href, is_button, {\n                onCreateLink,\n                onShowToast,\n                dictionary,\n            });\n        };\n        this.handleOnSelectLink = ({ href, title, id, subtitle, image, event_obj, }) => {\n            const { view } = this.props;\n            const { state, dispatch } = view;\n            const { from, to } = state.selection;\n            const is_button = isNodeActive_1.default(state.schema.nodes.button)(state);\n            if (is_button) {\n                const range = getNodeRange_1.default(state.schema.nodes.button)(state);\n                const effectiveTitle = range.node.attrs.title ? range.node.attrs.title : title;\n                dispatch(view.state.tr\n                    .setNodeMarkup(range.from, undefined, { href, title: effectiveTitle, style: range.node.attrs.style }));\n            }\n            else {\n                const markType = state.schema.marks.link;\n                dispatch(state.tr\n                    .removeMark(from, to, markType)\n                    .addMark(from, to, markType.create({ href })));\n            }\n        };\n    }\n    render() {\n        const _a = this.props, { dictionary, onCreateLink, isTemplate } = _a, rest = __rest(_a, [\"dictionary\", \"onCreateLink\", \"isTemplate\"]);\n        const { view } = rest;\n        const { state } = view;\n        const { selection } = state;\n        const isCodeSelection = isNodeActive_1.default(state.schema.nodes.code_block)(state);\n        if (isCodeSelection) {\n            return null;\n        }\n        const colIndex = getColumnIndex_1.default(state.selection);\n        const rowIndex = getRowIndex_1.default(state.selection);\n        const isTableSelection = colIndex !== undefined && rowIndex !== undefined;\n        const is_link = isMarkActive_1.default(state.schema.marks.link)(state);\n        const is_button = isNodeActive_1.default(state.schema.nodes.button)(state);\n        const range = is_link ? getMarkRange_1.default(selection.$from, state.schema.marks.link) : getNodeRange_1.default(state.schema.nodes.button)(state);\n        let items = [];\n        if (isTableSelection) {\n            items = table_1.default(dictionary);\n        }\n        else if (colIndex !== undefined) {\n            items = tableCol_1.default(state, colIndex, dictionary);\n        }\n        else if (rowIndex !== undefined) {\n            items = tableRow_1.default(state, rowIndex, dictionary);\n        }\n        else {\n            items = formatting_1.default(state, isTemplate, dictionary);\n        }\n        if (!items.length) {\n            return null;\n        }\n        return (React.createElement(react_portal_1.Portal, null,\n            React.createElement(FloatingToolbar_1.default, { view: view, active: isActive(this.props) }, (is_link && range) || is_button ? (React.createElement(LinkEditor_1.default, Object.assign({ dictionary: dictionary, node: range.node, mark: range.mark, from: range.from, to: range.to, onCreateLink: onCreateLink ? this.handleOnCreateLink : undefined, onSelectLink: this.handleOnSelectLink }, rest))) : (React.createElement(Menu_1.default, Object.assign({ items: items }, rest))))));\n    }\n}\nexports.default = SelectionToolbar;\n\n\n//# sourceURL=webpack:///./src/components/SelectionToolbar.tsx?");

/***/ })

})