webpackHotUpdate("main",{

/***/ "./src/lib/markdown/buttons.ts":
/*!*************************************!*\
  !*** ./src/lib/markdown/buttons.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst token_1 = __importDefault(__webpack_require__(/*! markdown-it/lib/token */ \"./node_modules/markdown-it/lib/token.js\"));\nfunction isInline(token) {\n    return token.type === \"inline\";\n}\nfunction isParagraph(token) {\n    return token.type === \"paragraph_open\";\n}\nfunction isLinkOpen(token) {\n    return token.type === \"link_open\";\n}\nfunction isLinkClose(token) {\n    return token.type === \"link_close\";\n}\nfunction markdownItButton(md) {\n    md.core.ruler.push(\"button\", state => {\n        const tokens = state.tokens;\n        let insideLink;\n        for (let i = tokens.length - 1; i > 0; i--) {\n            if (isInline(tokens[i]) && isParagraph(tokens[i - 1])) {\n                const tokenChildren = tokens[i].children || [];\n                for (let j = 0; j < tokenChildren.length - 1; j++) {\n                    const current = tokenChildren[j];\n                    if (!current)\n                        continue;\n                    if (isLinkOpen(current)) {\n                        insideLink = current;\n                        continue;\n                    }\n                    if (isLinkClose(current)) {\n                        insideLink = null;\n                        continue;\n                    }\n                    if (current.content && insideLink && insideLink.attrs && insideLink.attrs.length > 1 && insideLink.attrs[1][0] == 'style') {\n                        const href = insideLink.attrs ? insideLink.attrs[0][1] : \"\";\n                        const style = insideLink.attrs[1][1];\n                        const token = new token_1.default(\"button\", \"a\", 0);\n                        token.content = current.content;\n                        token.attrSet(\"title\", current.content);\n                        token.attrSet(\"href\", href);\n                        token.attrSet(\"style\", style);\n                        const tokenChildren = new token_1.default(\"text\", \"\", 0);\n                        tokenChildren.content = current.content;\n                        token.children = [tokenChildren];\n                        tokens.splice(i - 1, 3, token);\n                        break;\n                    }\n                }\n            }\n        }\n        return false;\n    });\n}\nexports.default = markdownItButton;\n\n\n//# sourceURL=webpack:///./src/lib/markdown/buttons.ts?");

/***/ })

})